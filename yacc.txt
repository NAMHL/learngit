%{
   #include <stdio.h>
   #include <stdarg.h>
   #include "need.h"
   nodeType *opr(int oper,int nops,...);
   nodeType *id(int i);
   nodeType *con(float value);
   nodeType *str(char str[]);
   void freeNode(nodeType *p);
   float ex(nodeType *p);
   int exTree(nodeType *p);
   void treeDrawBox(char* s,int c,int l);
   void treeDrawLine(int c1,int l1,int c2,int l2);
   void exNode(nodeType* p,int c,int l,int *childend,int *childmid);
   int yylex(void);
   void yyerror(char* s);
   void addVar(char *s);
   int totalVar=0;
   int currentVar;
   int columndis=2;
   int linedis=4;
   #define lmax 5000
   #define cmax 5000
   char tree[lmax][cmax];
   int treeNumber=1;
   Map sym[100];
   FILE *yyin;
   FILE *command;
   FILE *Tree;
%}
%union
{
   float iValue;
   int sIndex;
   char com[25];
   nodeType *nPtr;
 };
%token<iValue>NUMBER
%token<sIndex>VARIABLE
%token<com>COMMAND RESET
%token FOR WHILE PRINT _BEGIN END REPEAT UNTIL DELAY ROBOT COMMANDFUNCTION RESETFUNCTION
%nonassoc IF
%nonassoc ELSE
%left AND OR
%left GE LE EQ NE '>''<'
%left '+''-'
%left '*''/'
%left SELFADD SELFMINUS PRESELFADD PRESELFMINUS
%nonassoc UMINUS
%type <nPtr> stmt expr stmt_list expr_set expr_setself expr_comp opexpr_comp
%%
program:
     _BEGIN function END  {exit(0);}
     ;
function:
     function stmt  {ex($2);exTree($2);freeNode($2);}
     |
      ;
stmt:
     ';'                {$$=opr(';',2,NULL,NULL);}  /*可以不用进行任何操作，此处凑足两个 可以和下面的形式保持一致 减少分情况讨论的麻烦*/
     |expr';'           {$$=$1;}
     |expr_set';'       {$$=$1;}
	 |PRINT expr';'     {$$=opr(PRINT,1,$2);}
     |PRINT expr_set';'  {$$=opr(PRINT,1,$2);}
     |WHILE'('expr_comp')'stmt {$$=opr(WHILE,2,$3,$5);}
     |REPEAT stmt UNTIL'('opexpr_comp')'';' {$$=opr(REPEAT,2,$2,$5);}
	 |FOR'('expr_set';'expr_comp';'expr_set')' stmt {$$=opr(FOR,4,$3,$5,$7,$9);}
	 |IF'('expr_comp')'stmt ELSE stmt %prec ELSE{$$=opr(IF,3,$3,$5,$7);}
     |IF'('expr_comp')'stmt %prec IF {$$=opr(IF,2,$3,$5);}
	 |'{'stmt_list'}' {$$=$2;}
	 |RESET';'             {$$=opr(RESETFUNCTION,1,str($1));}
	 |ROBOT'{'expr'}'';'  {$$=opr(ROBOT,1,$3);}
	 |DELAY'{'expr'}'';'  {$$=opr(DELAY,1,$3);}
     |COMMAND'{'expr'}'';'   {$$=opr(COMMANDFUNCTION,2,str($1),$3);}
     |COMMAND';'     {$$=opr(COMMAND,1,str($1));}
	 ;
stmt_list:
      stmt {$$=$1;}
      |stmt_list stmt {$$=opr(';',2,$1,$2);}
	  ;
expr_set:
      VARIABLE'='expr {$$=opr('=',2,id($1),$3);}
	  |VARIABLE'='expr_setself{$$=opr('=',2,id($1),$3);}
	  |expr_setself
	  ;
expr_setself:
      SELFADD VARIABLE  {$$=opr(PRESELFADD,1,id($2));}
	  |SELFMINUS VARIABLE {$$=opr(PRESELFMINUS,1,id($2));}
	  |VARIABLE SELFADD {$$=opr(SELFADD,1,id($1));}
	  |VARIABLE SELFMINUS {$$=opr(SELFMINUS,1,id($1));}
	  |'('expr_setself')' {$$=$2;}
	  ;
expr_comp:
      expr'<'expr {$$=opr('<',2,$1,$3);}
      |expr'>'expr {$$=opr('>',2,$1,$3);}
      |expr GE expr {$$=opr(GE,2,$1,$3);}
      |expr LE expr {$$=opr(LE,2,$1,$3);}
      |expr NE expr {$$=opr(NE,2,$1,$3);}
      |expr EQ expr {$$=opr(EQ,2,$1,$3);}
      |expr_comp AND expr_comp {$$=opr(AND,2,$1,$3);}
	  |expr_comp OR expr_comp {$$=opr(OR,2,$1,$3);}
	  |'('expr_comp')'  {$$=$2;}
opexpr_comp:
      expr'<'expr {$$=opr('>',2,$1,$3);}
      |expr'>'expr {$$=opr('<',2,$1,$3);}
      |expr GE expr {$$=opr(LE,2,$1,$3);}
      |expr LE expr {$$=opr(GE,2,$1,$3);}
      |expr NE expr {$$=opr(EQ,2,$1,$3);}
      |expr EQ expr {$$=opr(NE,2,$1,$3);}
	  |'('expr_comp')'  {$$=$2;}
expr:
      NUMBER     {$$=con($1);}
      |VARIABLE    {$$=id($1);}
      |'-'expr %prec UMINUS  {$$=opr(UMINUS,1,$2);}
      |expr'+'expr {$$=opr('+',2,$1,$3);}
      |expr'-'expr {$$=opr('-',2,$1,$3);}
      |expr'*'expr {$$=opr('*',2,$1,$3);}
      |expr'/'expr {$$=opr('/',2,$1,$3);}
      |'('expr')'{$$=$2;}
      ;
%%
nodeType*con(float value)
{
    nodeType*p;
    p=malloc(sizeof(nodeType));
    p->type=typeCon;
    p->con.value=value;
    return p;
}
nodeType *id(int i)
{
   nodeType*p;
   p=malloc(sizeof(nodeType));
   p->type=typeId;
   p->id.i=i;
   return p;
}
nodeType*str(char str[])
{

   nodeType*p;
   p=malloc(sizeof(nodeType));
   p->type=typeChar;
   strcpy(p->s.str,str);
   return p;
}
nodeType *opr(int oper,int nops,...)
{
   va_list ap;/*定义一个 va_list 指针来访问参数表*/
   nodeType *p;
   int i;
   p=malloc(nops*sizeof(nodeType));
   p->type=typeOpr;
   p->opr.oper=oper;
   p->opr.nops=nops;
   va_start(ap,nops);/*初始化 ap，让它指向第一个变参*/
   for(i=0;i<nops;i++)
      p->opr.op[i]=va_arg(ap,nodeType*);/* 获取一个 nodeType* 型参数，并且 ap 指向下一个参数*/
   va_end(ap);/*关闭ap*/
   return p;
}
void addVar(char *s)
{
 if(totalVar==0)
 {
    strcpy(sym[0].s,s);
    totalVar++;
    currentVar=0;
    return;
 }
 int i;
 for(i=0;i<totalVar;i++)
 {
   if(strcmp(sym[i].s,s)==0)
   {
      currentVar=i;
      return;
   }
}
 strcpy(sym[totalVar].s,s);
 currentVar=totalVar;
 totalVar++;
}

float ex(nodeType*p)
{
   if(!p) return 0;
   switch(p->type)
   {
       case typeCon:return p->con.value;
       case typeId: return sym[p->id.i].n;
	   case typeChar:{
	                 int i;
	                 int len=strlen(p->s.str);
	                 for(i=0;i<len;i++)
					 {
					     if((p->s.str[i]!='{')&&(p->s.str[i]!='}'))
						 fprintf(command,"%c",p->s.str[i]);
					 }
	                 return 0.0;
					 }
       case typeOpr:
           switch(p->opr.oper)
           {
                case WHILE:while(ex(p->opr.op[0])) ex(p->opr.op[1]); return 0;
                case IF: if(ex(p->opr.op[0])) ex(p->opr.op[1]);
                         else if(p->opr.nops>2)  ex(p->opr.op[2]);
                         return 0;
                case FOR:ex(p->opr.op[0]);
				         while(ex(p->opr.op[1]))
				         {
						    ex(p->opr.op[3]);
							ex(p->opr.op[2]);
						 }
				         return 0;
			    case REPEAT:
				           do
						   {
						   ex(p->opr.op[0]);
						   }while(ex(p->opr.op[1])); return 0;
				case PRINT:printf("%g\n",ex(p->opr.op[0]));return 0;
				case RESETFUNCTION:{float temp;temp=ex(p->opr.op[0]);fprintf(command,",%c",'\n');return 0;}
				case DELAY:fprintf(command,"delay%g,\n",ex(p->opr.op[0]));return 0;
				case ROBOT:fprintf(command,"robot%g,\n",ex(p->opr.op[0]));return 0;
				case COMMAND:{float temp;temp=ex(p->opr.op[0]);fprintf(command,",%c",'\n');return 0;}
				case COMMANDFUNCTION:{float temp;temp=ex(p->opr.op[0]);fprintf(command,"%g,\n",ex(p->opr.op[1])); return 0;}
				case';':ex(p->opr.op[0]);  return ex(p->opr.op[1]);
                case'=':return sym[p->opr.op[0]->id.i].n=ex(p->opr.op[1]);
                case UMINUS:return -ex(p->opr.op[0]);
                case '+': return ex(p->opr.op[0])+ex(p->opr.op[1]);
                case '-':return ex(p->opr.op[0])-ex(p->opr.op[1]);
                case '*': return ex(p->opr.op[0])*ex(p->opr.op[1]);
                case '/': return ex(p->opr.op[0])/ex(p->opr.op[1]);
                case '<': return ex(p->opr.op[0])<ex(p->opr.op[1]);
                case '>': return ex(p->opr.op[0])>ex(p->opr.op[1]);
                case GE: return ex(p->opr.op[0])>=ex(p->opr.op[1]);
                case LE: return ex(p->opr.op[0])<=ex(p->opr.op[1]);
                case NE: return ex(p->opr.op[0])!=ex(p->opr.op[1]);
                case EQ: return ex(p->opr.op[0])==ex(p->opr.op[1]);
                case PRESELFADD:return ++sym[p->opr.op[0]->id.i].n;
				case PRESELFMINUS:return --sym[p->opr.op[0]->id.i].n;
				case SELFADD:return sym[p->opr.op[0]->id.i].n++;
				case SELFMINUS:return sym[p->opr.op[0]->id.i].n--;
				case AND:return ex(p->opr.op[0])&&ex(p->opr.op[1]);
				case OR:return ex(p->opr.op[0])||ex(p->opr.op[1]);
			 }
    }
    return 0;
}
int exTree(nodeType *p)
{
   int rootend,rootmid;
    int i,j;
    for(i=0;i<lmax;i++)
    {
      for(j=0;j<cmax;j++)
	  {
	    tree[i][j]=' ';
	  }
    }
    exNode(p,0,0,&rootend,&rootmid);
    for(i=0;i<lmax;i++)
	{
	   for(j=cmax-1;j>=0&&tree[i][j]==' ';j--);
	   if(j<cmax-1) tree[i][j+1]='\0';
	   else tree[i][cmax-1]='\0';
	}
	for(i=lmax-1;i>0&&tree[i][0]=='\0';i--);
	fprintf(Tree,"\n\nSyntaxTree %d:\n",treeNumber++);
	for(j=0;j<=i;j++)
	{
	  fprintf(Tree,"\n%s",tree[j]);
	}
   printf("\n");
   return 0; 
}
void exNode(nodeType *p,int c,int l,int *childend,int *childmid)
{
   int w,h;
   char *s;
   int ctemp;
   int k;
   int childrenend,childrenmid;
   int childstart;
   char treestr[20];
   s=treestr;
   switch(p->type)
   {
      case typeCon:sprintf(s,"con(%g)",p->con.value);break;
	  case typeId:sprintf(s,"id(%s)",sym[p->id.i].s);break;
	  case typeChar:sprintf(s,"str(%s)",p->s.str);break;
	  case typeOpr:
	  switch(p->opr.oper)
	  {
	     case FOR:s="for";break;
		 case REPEAT:s="repeat";break;
		 case WHILE:s="while";break;
		 case IF:s="if";break;
		 case PRINT:s="print";break;
		 case RESETFUNCTION:s="resetfunction";break;
		 case DELAY:s="delay";break;
		 case ROBOT:s="robot";break;
		 case COMMAND:s="command";break;
		 case COMMANDFUNCTION:s="commandfunction";break;
		 case ';':s="[;]";break;
		 case '=':s="[=]";break;
		 case UMINUS:s="[_]";break;
		 case '+':s="[+]";break;
		 case '-':s="[-]";break;
		 case '*':s="[*]";break;
		 case '/':s="[/]";break;
		 case '<':s="[<]";break;
		 case '>':s="[>]";break;
		 case GE:s="[>=]";break;
		 case LE:s="[<=]";break;
		 case NE:s="[!=]";break;
		 case EQ:s="[==]";break;
		 case PRESELFADD:s="[++]";break;
	     case PRESELFMINUS:s="[--]";break;
		 case SELFADD:s="[++]";break;
		 case SELFMINUS:s="[--]";break;
		 case AND:s="[&&]";break;
		 case OR:s="[||]";break;
	    }
	  break;
    }
	w=strlen(s)+columndis;
	h=1;
	ctemp=c;
	*childend=c+w;
	*childmid=c+w/2;
	if(p->type==typeCon||p->type==typeId||p->type==typeChar||p->opr.nops==0)
	{
	   treeDrawBox(s,ctemp,l);
	   return;
	}
	childstart=c;
	for(k=0;k<p->opr.nops;k++)
	{
	   exNode(p->opr.op[k],childstart,l+h+linedis,&childrenend,&childrenmid);
	   childstart=childrenend;
	}
	if(w<childrenend-c)
	{
	  ctemp+=(childrenend-c-w)/2;
	  *childend=childrenend;
	  *childmid=(c+childrenend)/2;
	}
	treeDrawBox(s,ctemp,l);
	childstart=c;
	for(k=0;k<p->opr.nops;k++)
	{
	   exNode(p->opr.op[k],childstart,l+h+linedis,&childrenend,&childrenmid);
	   treeDrawLine(*childmid,l+h,childrenmid,l+h+linedis-1);
	   childstart=childrenend;
	}
}
void treeTest(int l,int c)
{
   int flag;
   flag=1;
   if(l<0) flag=0;
   if(l>=lmax) flag=0;
   if(c<0) flag=0;
   if(c>=cmax) flag=0;
   if(flag) return;
   printf("%s\n","rage error");
   printf("%d %d\n",l,c);
}
void treeDrawBox(char *s,int c,int l)
{
   int i;
   treeTest(l,c+strlen(s)-1+columndis);
   for(i=0;i<strlen(s);i++)
   {
      tree[l][c+i+columndis]=s[i];
   }
}
void treeDrawLine(int c1,int l1,int c2,int l2)
{
    int m;
	treeTest(l1,c1);
	treeTest(l2,c2);
	m=(l1+l2)/2;
	while(l1!=m)
	{
	  tree[l1][c1]='|';
	  if(l1<l2) l1++;
	  else l1--;
	}
	while(c1!=c2)
	{
	   tree[l1][c1]='-';
	   if(c1<c2) c1++;
	   else c1--;
	}
	while(l1!=l2)
	{
	  tree[l1][c1]='|';
	  if(l1<l2) l1++;
	  else l1--;
	}
	tree[l1][c1]='|';	
}
void freeNode(nodeType *p)
{
    int i;
    if(!p) return ;
    if(p->type==typeOpr)
    {
        for(i=0;i<p->opr.nops;i++)
         freeNode(p->opr.op[i]);
     }
     free(p);
}
void yyerror(char *s)
{
   printf("parse error");
}
#include "lex.yy.c"
int main(void)
{
    yyin=fopen("in.txt","r");
    command = fopen("commands.txt","w");//打开文档，写入
	Tree=fopen("Tree.txt","w");
    yyparse();
    return 0;
}
